var Node, TagNode,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Node = require('./');

module.exports = TagNode = (function(_super) {
  __extends(TagNode, _super);

  function TagNode(name, opts) {
    this.name = name;
    if (opts == null) {
      opts = {};
    }
    TagNode.__super__.constructor.call(this, opts);
    this.type = 'tag';
  }

  TagNode.prototype._style = function() {
    var childNode, code, output, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    if (this.children.length === 0) {
      return;
    }
    output = [];
    _ref = this.open;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      code = _ref[_i];
      output.push(code);
    }
    _ref1 = this.children;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      childNode = _ref1[_j];
      output = output.concat(childNode._style());
      output = output.concat(this.open);
    }
    _ref2 = this.close;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      code = _ref2[_k];
      output.push(code);
    }
    return output;
  };

  TagNode.prototype.copy = function() {
    var child, copy, _i, _len, _ref;
    copy = new TagNode(this.tag, {
      type: this.type,
      open: this.open.slice(0),
      close: this.close.slice(0)
    });
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      copy.append(child.copy());
    }
    return copy;
  };

  TagNode.prototype.splice = function(start, end) {
    var child, i, index, newIndex, _i, _len, _ref;
    if (start == null) {
      start = 0;
    }
    if (end == null) {
      end = Infinity;
    }
    index = 0;
    _ref = this.children;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      child = _ref[i];
      newIndex = index + child.length;
      if (index + child.length < start) {
        this.children.shift();
        this.length -= child.length;
      } else {
        if (newIndex >= end) {
          this.length -= child.length;
          child.splice(0, end - index);
          this.length += child.length;
        }
        if (start > index && start < newIndex) {
          this.length -= child.length;
          child.splice(start - index);
          this.length += child.length;
        }
        if (newIndex === end) {
          break;
        }
      }
    }
    return this;
  };

  return TagNode;

})(Node);
