var Node, TextNode,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Node = require('./');

module.exports = TextNode = (function(_super) {
  __extends(TextNode, _super);

  function TextNode(value, opts) {
    this.value = value;
    if (opts == null) {
      opts = {};
    }
    TextNode.__super__.constructor.call(this, opts);
    this.type = 'text';
    this.length = value.length;
  }

  TextNode.prototype._style = function() {
    return [unescape(this.value)];
  };

  TextNode.prototype.copy = function() {
    var copy;
    copy = new TextNode(this.value, {
      type: this.type,
      open: this.open.slice(0),
      close: this.close.slice(0)
    });
    return copy;
  };

  TextNode.prototype.splice = function(start, end) {
    if (start == null) {
      start = 0;
    }
    if (end == null) {
      end = Infinity;
    }
    this.value = this.value.slice(start, end);
    this.length = this.value.length;
    return this;
  };

  return TextNode;

})(Node);
