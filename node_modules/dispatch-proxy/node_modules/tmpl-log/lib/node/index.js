var CLOSE_CODES, EventEmitter, Node,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

CLOSE_CODES = require('../const').CLOSE_CODES;

module.exports = Node = (function(_super) {
  __extends(Node, _super);

  function Node(_arg) {
    this.type = _arg.type, this.open = _arg.open, this.close = _arg.close;
    Node.__super__.constructor.call(this);
    this.children || (this.children = []);
    this.open || (this.open = []);
    this.close || (this.close = []);
    this.length || (this.length = 0);
  }

  Node.prototype.append = function(child) {
    var _this = this;
    this.length += child.length;
    this.children.push(child);
    this.emit('append', child);
    return child.on('append', function(child) {
      _this.length += child.length;
      return _this.emit('append', child);
    });
  };

  Node.prototype.appendCodes = function(codes) {
    var code, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = codes.length; _i < _len; _i++) {
      code = codes[_i];
      this.open.push(code);
      _results.push(this.close.unshift(CLOSE_CODES[code]));
    }
    return _results;
  };

  Node.prototype.style = function() {
    return this._style().join('');
  };

  Node.prototype._style = function() {
    throw new Error('Not implemented');
  };

  Node.prototype.copy = function() {
    throw new Error('Not implemented');
  };

  Node.prototype.slice = function(start, end) {
    var copy;
    if (start == null) {
      start = 0;
    }
    if (end == null) {
      end = Infinity;
    }
    copy = this.copy();
    copy.splice(start, end);
    return copy;
  };

  Node.prototype.splice = function() {
    throw new Error('Not implemented');
  };

  return Node;

})(EventEmitter);
