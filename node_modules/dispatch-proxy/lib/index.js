var HttpProxy, Logger, SocksProxy, crypto, inspect, logger, os, pkg, program,
  __slice = [].slice;

os = require('os');

inspect = require('util').inspect;

crypto = require('crypto');

program = require('commander');

Logger = require('tmpl-log');

SocksProxy = require('./proxy/socks');

HttpProxy = require('./proxy/http');

pkg = require('../package');

logger = new Logger({
  tab: 10,
  gutter: ' '
}).registerTag('b', ['bold']).registerTag('s', ['green']).registerTag('i', ['cyan']).registerTag('e', ['red']).registerTag('a', ['b', 'underline']).registerEvent('request', '<b><i>request').registerEvent('dispatch', '<b><i>dispatch').registerEvent('connect', '<b><s>connect').registerEvent('response', '<b><s>response').registerEvent('error', '<b><e>error').registerEvent('end', '<b><i>end').registerMode('default', ['error']).registerMode('debug', true);

program.version(pkg.version);

program.command('list').description('list all available network interfaces').action(function() {
  var address, addrs, family, interfaces, internal, name, opts, _i, _len, _ref, _results;
  interfaces = os.networkInterfaces();
  _results = [];
  for (name in interfaces) {
    addrs = interfaces[name];
    logger.log("<b>" + name);
    for (_i = 0, _len = addrs.length; _i < _len; _i++) {
      _ref = addrs[_i], address = _ref.address, family = _ref.family, internal = _ref.internal;
      opts = [];
      if (family) {
        opts.push(family);
      }
      if (internal) {
        opts.push('internal');
      }
      logger.log(("    <a>" + address + "</>") + (opts.length > 0 ? " (" + (opts.join(', ')) + ")" : ''));
    }
    _results.push(logger.log(''));
  }
  return _results;
});

program.command('start').usage('[options] [addresses]').description('start a proxy server').option('-H, --host <h>', 'which host to accept connections from (defaults to localhost)', String).option('-p, --port <p>', 'which port to listen to for connections (defaults to 8080 for HTTP proxy, 1080 for SOCKS proxy)', Number).option('--http', 'start an http proxy server', Boolean).option('--debug', 'log debug info in the console', Boolean).action(function() {
  var addr, address, addresses, addrs, arg, args, debug, host, http, https, name, port, priority, proxy, type, _arg, _i, _j, _k, _len, _len1, _ref, _ref1;
  args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), _arg = arguments[_i++];
  port = _arg.port, host = _arg.host, http = _arg.http, https = _arg.https, debug = _arg.debug;
  if (debug) {
    logger.setMode('debug');
  }
  addresses = [];
  if (args.length === 0) {
    _ref = os.networkInterfaces();
    for (name in _ref) {
      addrs = _ref[name];
      for (_j = 0, _len = addrs.length; _j < _len; _j++) {
        addr = addrs[_j];
        if (addr.family === 'IPv4' && !addr.internal) {
          addresses.push({
            address: addr.address,
            priority: 1
          });
        }
      }
    }
  } else {
    for (_k = 0, _len1 = args.length; _k < _len1; _k++) {
      arg = args[_k];
      _ref1 = arg.split('@'), address = _ref1[0], priority = _ref1[1];
      priority = priority ? parseInt(priority) : 1;
      addresses.push({
        address: address,
        priority: priority
      });
    }
  }
  host || (host = 'localhost');
  if (http) {
    port || (port = 8080);
    type = 'HTTP';
    proxy = new HttpProxy(addresses, port, host);
    proxy.on('request', function(_arg1) {
      var clientRequest, id, localAddress, serverRequest;
      clientRequest = _arg1.clientRequest, serverRequest = _arg1.serverRequest, localAddress = _arg1.localAddress;
      id = (crypto.randomBytes(3)).toString('hex');
      logger.emit('request', "[" + id + "] <a>" + clientRequest.url + "</>");
      logger.emit('dispatch', "[" + id + "] <a>" + localAddress + "</>");
      serverRequest.on('response', function(serverResponse) {
        return logger.emit('response', "[" + id + "] <magenta><b>" + serverResponse.statusCode + "</></>");
      }).on('error', function(err) {
        return logger.emit('error', "[" + id + "] clientRequest\n" + (escape(err.stack)));
      }).on('end', function() {
        return logger.emit('end', "[" + id + "] serverRequest");
      });
      return clientRequest.on('error', function(err) {
        return logger.emit('error', "[" + id + "] clientRequest\n" + (escape(err.stack)));
      }).on('end', function() {
        return logger.emit('end', "[" + id + "] clientRequest");
      });
    }).on('error', function(err) {
      return logger.emit('error', "server\n" + (escape(err.stack)));
    });
  } else {
    port || (port = 1080);
    type = 'SOCKS';
    proxy = new SocksProxy(addresses, port, host);
    proxy.on('request', function(_arg1) {
      var clientConnection, host, id, localAddress, port, serverConnection;
      serverConnection = _arg1.serverConnection, clientConnection = _arg1.clientConnection, host = _arg1.host, port = _arg1.port, localAddress = _arg1.localAddress;
      id = (crypto.randomBytes(3)).toString('hex');
      logger.emit('request', "[" + id + "] <a>" + host + "</><b>:" + port + "</>");
      logger.emit('dispatch', "[" + id + "] <a>" + localAddress + "</>");
      serverConnection.on('connect', function() {
        return logger.emit('connect', "[" + id + "] <a>" + host + "</><b>:" + port + "</>");
      }).on('error', function(err) {
        return logger.emit('error', "[" + id + "] serverConnection\n" + (escape(err.stack)));
      }).on('end', function() {
        return logger.emit('end', "[" + id + "] serverConnection");
      });
      return clientConnection.on('error', function(err) {
        return logger.emit('error', "[" + id + "] clientConnection\n" + (escape(err.stack)));
      }).on('end', function() {
        return logger.emit('end', "[" + id + "] clientConnection");
      });
    }).on('error', function(err) {
      return logger.emit('error', "server\n" + (escape(err.stack)));
    }).on('socksError', function(err) {
      return logger.emit('error', "socks\n" + (escape(err.message)));
    });
  }
  return logger.log("<b><magenta>" + type + "</></> server started on <a>" + host + "</><b>:" + port + "</>\nDispatching to addresses " + (((function() {
    var _l, _len2, _ref2, _results;
    _results = [];
    for (_l = 0, _len2 = addresses.length; _l < _len2; _l++) {
      _ref2 = addresses[_l], address = _ref2.address, priority = _ref2.priority;
      _results.push("<a>" + address + "</><b>@" + priority + "</>");
    }
    return _results;
  })()).join(', ')));
});

program.parse(process.argv);
