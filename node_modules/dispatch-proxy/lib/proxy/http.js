var Dispatcher, HttpProxy, http, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

http = require('http');

url = require('url');

Dispatcher = require('../dispatcher');

module.exports = HttpProxy = (function(_super) {
  __extends(HttpProxy, _super);

  function HttpProxy(addresses, listenPort, listenHost) {
    var agent,
      _this = this;
    HttpProxy.__super__.constructor.call(this, addresses);
    agent = new http.Agent({
      maxSockets: Infinity
    });
    this.server = http.createServer(function(clientRequest, clientResponse) {
      var localAddress, options, serverRequest;
      localAddress = _this.dispatch();
      options = url.parse(clientRequest.url);
      options.localAddress = localAddress;
      options.method = clientRequest.method;
      options.headers = clientRequest.headers;
      options.agent = agent;
      serverRequest = http.request(options);
      clientRequest.pipe(serverRequest);
      serverRequest.on('response', function(serverResponse) {
        clientResponse.writeHead(serverResponse.statusCode, serverResponse.headers);
        return serverResponse.pipe(clientResponse);
      }).on('error', function(error) {
        clientResponse.writeHead(502);
        return clientResponse.end();
      }).on('end', function() {
        return _this.free(localAddress);
      });
      return _this.emit('request', {
        clientRequest: clientRequest,
        serverRequest: serverRequest,
        localAddress: localAddress
      });
    });
    this.server.listen(listenPort, listenHost);
  }

  return HttpProxy;

})(Dispatcher);
